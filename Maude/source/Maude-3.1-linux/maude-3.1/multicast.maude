*** maude demo hvl april 2021
view Oid from TRIV to CONFIGURATION is
    sort Elt to Oid .
endv

mod POPULATION is
    protecting NAT + STRING .
    protecting CONFIGURATION .
    pr SET{Oid} .
    sorts Status .

    op single : -> Status [ctor] .
    ops engaged married : Oid -> Status [ctor] .
    op age :_ : Nat -> Attribute [ctor].
    op status :_ : Status -> Attribute [ctor].
    op Person : -> Cid [ctor] .
    
    subsort String < Oid .
    
    vars N N' M A : Nat .   vars X X' Y Z : String . var S : Status . var AS : AttributeSet .
    var R : NeSet{Oid} .
    var F : Set{Oid} .
    
    *** Communiation begins here:
    
    ops marry? yes no : Oid Oid -> Msg .
    op waitFor : Set{Oid} -> Status .
			
    crl [accept] : marry?(Y, X) < Y : Person | age : N, status : single >
			=>
		   < Y : Person | age : N, status : engaged(X) > yes(X, Y) if N > 15 .
    rl [reject] : marry?(Y, X) < Y : Person | age : N, status : S >
                  =>
                  < Y : Person | age : N, status : S > no(X, Y) .
                  
    rl [yes] : yes(X, Y) < X : Person | age : N, status : waitFor((Y, F)) >
		=>
		< X : Person | age : N, status : engaged(Y) > .
		*** Would need to clean up no or other yes messages when one was answered with yes already.
    rl [no] : no(X, Y) < X : Person | age : N, status : waitFor((Y, F)) >
	        => < X : Person | age : N, status : waitFor(F) > .
	        *** would need to deal with waitFor(empty) somehow
	        
    op marry?MultCast : Oid Set{Oid} -> Msg .
    *** Unfold the mult cast:
    eq marry?MultCast(X, (Y, R)) = marry?(Y, X) marry?MultCast(X, R) .
    eq marry?MultCast(X, (Y, empty)) = marry?(X, Y) .
    
    crl [proposeToThree] :  < X : Person | age : N, status : single >
                            < Y : Person | age : M, status : single >
                            < X' : Person | age : N', status : single >
                            < Z : Person | age : A, status : single >
			=>
			marry?MultCast(X, (Y, X', Z))
			< X : Person | age : N, status : waitFor((Y, X', Z)) >
                       < Y : Person | age : M, status : single >
                       < X' : Person | age : N', status : single >
                       < Z : Person | age : A, status : single > if N > 15 .

  op greeks : -> Configuration .
  eq greeks =   
    < "Gaia" : Person | age : 999, status : single >
    < "Uranus" : Person | age : 900, status : single >
    < "Kronos" : Person | age : 800, status : single >
    < "Rhea" : Person | age : 12, status : single > .

endm
