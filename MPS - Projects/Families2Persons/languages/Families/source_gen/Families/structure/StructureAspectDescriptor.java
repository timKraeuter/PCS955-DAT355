package Families.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptFamiliy = createDescriptorForFamiliy();
  /*package*/ final ConceptDescriptor myConceptMember = createDescriptorForMember();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptFamiliy, myConceptMember);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Familiy:
        return myConceptFamiliy;
      case LanguageConceptSwitch.Member:
        return myConceptMember;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForFamiliy() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Families", "Familiy", 0xa882308c6c724214L, 0x8d920ec0b6d4f486L, 0x73822226716969d6L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:a51cbf13-89a6-4218-9a46-a48cbd054538(Families.structure)/8323252609840933334");
    b.version(2);
    b.aggregate("sons", 0x7382222671696a1dL).target(0xa882308c6c724214L, 0x8d920ec0b6d4f486L, 0x73822226716969e6L).optional(true).ordered(true).multiple(true).origin("8323252609840933405").done();
    b.aggregate("daughters", 0x7382222671696a2cL).target(0xa882308c6c724214L, 0x8d920ec0b6d4f486L, 0x73822226716969e6L).optional(true).ordered(true).multiple(true).origin("8323252609840933420").done();
    b.aggregate("father", 0x7382222671696a2fL).target(0xa882308c6c724214L, 0x8d920ec0b6d4f486L, 0x73822226716969e6L).optional(false).ordered(true).multiple(false).origin("8323252609840933423").done();
    b.aggregate("mother", 0x7382222671696a33L).target(0xa882308c6c724214L, 0x8d920ec0b6d4f486L, 0x73822226716969e6L).optional(false).ordered(true).multiple(false).origin("8323252609840933427").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMember() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Families", "Member", 0xa882308c6c724214L, 0x8d920ec0b6d4f486L, 0x73822226716969e6L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:a51cbf13-89a6-4218-9a46-a48cbd054538(Families.structure)/8323252609840933350");
    b.version(2);
    return b.create();
  }
}
