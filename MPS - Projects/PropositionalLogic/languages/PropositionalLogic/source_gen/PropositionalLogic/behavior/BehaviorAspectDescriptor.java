package PropositionalLogic.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myAtomicFormula__BehaviorDescriptor = new AtomicFormula__BehaviorDescriptor();
  private final BHDescriptor myNot__BehaviorDescriptor = new Not__BehaviorDescriptor();
  private final BHDescriptor myFormula__BehaviorDescriptor = new Formula__BehaviorDescriptor();
  private final BHDescriptor myBinaryFormula__BehaviorDescriptor = new BinaryFormula__BehaviorDescriptor();
  private final BHDescriptor myImplication__BehaviorDescriptor = new Implication__BehaviorDescriptor();
  private final BHDescriptor myAnd__BehaviorDescriptor = new And__BehaviorDescriptor();
  private final BHDescriptor myOr__BehaviorDescriptor = new Or__BehaviorDescriptor();
  private final BHDescriptor myTruthTable__BehaviorDescriptor = new TruthTable__BehaviorDescriptor();
  private final BHDescriptor myTwoSidedImplication__BehaviorDescriptor = new TwoSidedImplication__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myAnd__BehaviorDescriptor;
      case 1:
        return myAtomicFormula__BehaviorDescriptor;
      case 2:
        return myBinaryFormula__BehaviorDescriptor;
      case 3:
        return myFormula__BehaviorDescriptor;
      case 4:
        return myImplication__BehaviorDescriptor;
      case 5:
        return myNot__BehaviorDescriptor;
      case 6:
        return myOr__BehaviorDescriptor;
      case 7:
        return myTruthTable__BehaviorDescriptor;
      case 8:
        return myTwoSidedImplication__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xc8418222bda489cL, 0x8be629cedccd87d2L, 0x3a1671c24b80543dL), MetaIdFactory.conceptId(0xc8418222bda489cL, 0x8be629cedccd87d2L, 0x3a1671c24b8053e9L), MetaIdFactory.conceptId(0xc8418222bda489cL, 0x8be629cedccd87d2L, 0x3a1671c24b8053fbL), MetaIdFactory.conceptId(0xc8418222bda489cL, 0x8be629cedccd87d2L, 0x3a1671c24b8053efL), MetaIdFactory.conceptId(0xc8418222bda489cL, 0x8be629cedccd87d2L, 0x3a1671c24b80543cL), MetaIdFactory.conceptId(0xc8418222bda489cL, 0x8be629cedccd87d2L, 0x3a1671c24b8053ecL), MetaIdFactory.conceptId(0xc8418222bda489cL, 0x8be629cedccd87d2L, 0x3a1671c24b80543eL), MetaIdFactory.conceptId(0xc8418222bda489cL, 0x8be629cedccd87d2L, 0x3a1671c24b80cf8dL), MetaIdFactory.conceptId(0xc8418222bda489cL, 0x8be629cedccd87d2L, 0x3cc5cf549b561c19L)).seal();
}
