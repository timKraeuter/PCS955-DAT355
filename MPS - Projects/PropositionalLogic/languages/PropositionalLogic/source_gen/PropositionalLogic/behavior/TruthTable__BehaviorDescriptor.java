package PropositionalLogic.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.List;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Map;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedList;
import java.util.HashMap;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class TruthTable__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xc8418222bda489cL, 0x8be629cedccd87d2L, 0x3a1671c24b80cf8dL, "PropositionalLogic.structure.TruthTable");

  public static final SMethod<List<List<String>>> evalTruthTableToStringTable_id6oIDTZMP5Rt = new SMethodBuilder<List<List<String>>>(new SJavaCompoundTypeImpl((Class<List<List<String>>>) ((Class) Object.class))).name("evalTruthTableToStringTable").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6oIDTZMP5Rt").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<List<String>> evalTruthTable_id6oIDTZMLJHX = new SMethodBuilder<List<String>>(new SJavaCompoundTypeImpl((Class<List<String>>) ((Class) Object.class))).name("evalTruthTable").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6oIDTZMLJHX").build(SMethodBuilder.createJavaParameter((Class<List<Map<String, Boolean>>>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<List<Map<String, Boolean>>> prepareTruthTable_idJ56wWMYGlt = new SMethodBuilder<List<Map<String, Boolean>>>(new SJavaCompoundTypeImpl((Class<List<Map<String, Boolean>>>) ((Class) Object.class))).name("prepareTruthTable").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("J56wWMYGlt").build(SMethodBuilder.createJavaParameter((Class<List<String>>) ((Class) Object.class), ""));
  public static final SMethod<Void> appendToTruthTable_idJ56wWMYOss = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("appendToTruthTable").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("J56wWMYOss").build(SMethodBuilder.createJavaParameter((Class<List<String>>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<List<Map<String, Boolean>>>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<Map<String, Boolean>>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(evalTruthTableToStringTable_id6oIDTZMP5Rt, evalTruthTable_id6oIDTZMLJHX, prepareTruthTable_idJ56wWMYGlt, appendToTruthTable_idJ56wWMYOss);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static List<List<String>> evalTruthTableToStringTable_id6oIDTZMP5Rt(@NotNull SNode __thisNode__, final SNode formula) {
    final List<List<String>> result = ListSequence.fromList(new ArrayList<List<String>>());
    final List<String> names = ListSequence.fromList(new ArrayList<String>());
    Formula__BehaviorDescriptor.addAtomicFormulaeNames_idJ56wWMX7vv.invoke(formula, names);
    //  Add the first row 
    List<String> headerRow = ListSequence.fromList(new ArrayList<String>());
    ListSequence.fromList(headerRow).addSequence(ListSequence.fromList(names));
    ListSequence.fromList(headerRow).addElement("Result");
    ListSequence.fromList(result).addElement(headerRow);

    List<Map<String, Boolean>> unevaluatedTT = TruthTable__BehaviorDescriptor.prepareTruthTable_idJ56wWMYGlt.invoke(__thisNode__, names);

    ListSequence.fromList(unevaluatedTT).visitAll(new IVisitor<Map<String, Boolean>>() {
      public void visit(final Map<String, Boolean> valuation) {
        final List<String> row = ListSequence.fromList(new ArrayList<String>());
        ListSequence.fromList(names).visitAll(new IVisitor<String>() {
          public void visit(String name) {
            ListSequence.fromList(row).addElement((MapSequence.fromMap(valuation).get(name) ? "1" : "0"));
          }
        });
        ListSequence.fromList(row).addElement(((boolean) Formula__BehaviorDescriptor.evaluate_id3Cmss9bwMFB.invoke(formula, valuation) ? "1" : "0"));
        ListSequence.fromList(result).addElement(row);
      }
    });

    return result;
  }
  /*package*/ static List<String> evalTruthTable_id6oIDTZMLJHX(@NotNull SNode __thisNode__, List<Map<String, Boolean>> unevaluatedTT, final SNode formula) {
    final List<String> result = ListSequence.fromList(new LinkedList<String>());
    ListSequence.fromList(unevaluatedTT).visitAll(new IVisitor<Map<String, Boolean>>() {
      public void visit(Map<String, Boolean> it) {
        boolean oneResult = (boolean) Formula__BehaviorDescriptor.evaluate_id3Cmss9bwMFB.invoke(formula, it);
        ListSequence.fromList(result).addElement((oneResult ? "1" : "0"));
      }
    });
    return result;
  }
  /*package*/ static List<Map<String, Boolean>> prepareTruthTable_idJ56wWMYGlt(@NotNull SNode __thisNode__, List<String> atomicFormulaNames) {
    if (ListSequence.fromList(atomicFormulaNames).isEmpty()) {
      return ListSequence.fromList(new LinkedList<Map<String, Boolean>>());
    }

    List<Map<String, Boolean>> allValuations = ListSequence.fromList(new LinkedList<Map<String, Boolean>>());
    Map<String, Boolean> startValuation = MapSequence.fromMap(new HashMap<String, Boolean>());
    TruthTable__BehaviorDescriptor.appendToTruthTable_idJ56wWMYOss.invoke(__thisNode__, atomicFormulaNames, allValuations, startValuation);
    return allValuations;
  }
  /*package*/ static void appendToTruthTable_idJ56wWMYOss(@NotNull SNode __thisNode__, List<String> formulaNames, List<Map<String, Boolean>> allValuations, Map<String, Boolean> currentValuation) {
    if (ListSequence.fromList(formulaNames).isEmpty()) {
      return;
    }
    if (ListSequence.fromList(formulaNames).count() == 1) {
      String currentFormula = ListSequence.fromList(formulaNames).getElement(0);
      //  Add one instance with true 
      MapSequence.fromMap(currentValuation).put(currentFormula, true);
      ListSequence.fromList(allValuations).addElement(currentValuation);
      //  Add a copied instance with false 
      Map<String, Boolean> falseValuation = MapSequence.fromMap(new HashMap<String, Boolean>(MapSequence.fromMap(currentValuation).count()));
      MapSequence.fromMap(falseValuation).putAll(currentValuation);
      MapSequence.fromMap(falseValuation).put(currentFormula, false);
      ListSequence.fromList(allValuations).addElement(falseValuation);
    }
    //  Size is bigger than 1 here 
    String currentFormula = ListSequence.fromList(formulaNames).getElement(0);

    List<String> formulaNamesWithoutCurrent = ListSequence.fromList(new LinkedList<String>());
    ListSequence.fromList(formulaNamesWithoutCurrent).addSequence(ListSequence.fromList(formulaNames));
    ListSequence.fromList(formulaNamesWithoutCurrent).removeElement(currentFormula);

    MapSequence.fromMap(currentValuation).put(currentFormula, true);
    TruthTable__BehaviorDescriptor.appendToTruthTable_idJ56wWMYOss.invoke(__thisNode__, formulaNamesWithoutCurrent, allValuations, currentValuation);

    //  Add a copied instance with false 
    Map<String, Boolean> falseValuation = MapSequence.fromMap(new HashMap<String, Boolean>(MapSequence.fromMap(currentValuation).count()));
    MapSequence.fromMap(falseValuation).putAll(currentValuation);
    MapSequence.fromMap(falseValuation).put(currentFormula, false);
    TruthTable__BehaviorDescriptor.appendToTruthTable_idJ56wWMYOss.invoke(__thisNode__, formulaNamesWithoutCurrent, allValuations, falseValuation);
  }

  /*package*/ TruthTable__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((List<List<String>>) evalTruthTableToStringTable_id6oIDTZMP5Rt(node, (SNode) parameters[0]));
      case 1:
        return (T) ((List<String>) evalTruthTable_id6oIDTZMLJHX(node, (List<Map<String, Boolean>>) parameters[0], (SNode) parameters[1]));
      case 2:
        return (T) ((List<Map<String, Boolean>>) prepareTruthTable_idJ56wWMYGlt(node, (List<String>) parameters[0]));
      case 3:
        appendToTruthTable_idJ56wWMYOss(node, (List<String>) parameters[0], (List<Map<String, Boolean>>) parameters[1], (Map<String, Boolean>) parameters[2]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
