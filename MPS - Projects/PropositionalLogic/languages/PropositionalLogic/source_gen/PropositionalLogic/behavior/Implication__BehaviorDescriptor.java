package PropositionalLogic.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.Map;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class Implication__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xc8418222bda489cL, 0x8be629cedccd87d2L, 0x3a1671c24b80543cL, "PropositionalLogic.structure.Implication");

  public static final SMethod<Boolean> evaluate_id3Cmss9bwMFB = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("evaluate").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3Cmss9bwMFB").build(SMethodBuilder.createJavaParameter((Class<Map<String, Boolean>>) ((Class) Object.class), ""));
  public static final SMethod<String> getBinarySymbol_id7P0OLlYl3ad = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getBinarySymbol").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7P0OLlYl3ad").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(evaluate_id3Cmss9bwMFB, getBinarySymbol_id7P0OLlYl3ad);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean evaluate_id3Cmss9bwMFB(@NotNull SNode __thisNode__, Map<String, Boolean> valuation) {
    //  A --> B = !A || B Law 5.2.1.(7)  
    return !((boolean) Formula__BehaviorDescriptor.evaluate_id3Cmss9bwMFB.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.first$ZhL9), valuation)) || (boolean) Formula__BehaviorDescriptor.evaluate_id3Cmss9bwMFB.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.second$Zifb), valuation);
  }
  /*package*/ static String getBinarySymbol_id7P0OLlYl3ad(@NotNull SNode __thisNode__) {
    return "->";
  }

  /*package*/ Implication__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) evaluate_id3Cmss9bwMFB(node, (Map<String, Boolean>) parameters[0]));
      case 1:
        return (T) ((String) getBinarySymbol_id7P0OLlYl3ad(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink second$Zifb = MetaAdapterFactory.getContainmentLink(0xc8418222bda489cL, 0x8be629cedccd87d2L, 0x3a1671c24b8053fbL, 0x3a1671c24b805400L, "second");
    /*package*/ static final SContainmentLink first$ZhL9 = MetaAdapterFactory.getContainmentLink(0xc8418222bda489cL, 0x8be629cedccd87d2L, 0x3a1671c24b8053fbL, 0x3a1671c24b8053feL, "first");
  }
}
